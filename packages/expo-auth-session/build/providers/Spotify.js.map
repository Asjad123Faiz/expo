{"version":3,"file":"Spotify.js","sourceRoot":"","sources":["../../src/providers/Spotify.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useAuthRequestResult, useLoadedAuthRequest } from '../AuthRequestHooks';\nimport {\n  AuthRequest,\n  AuthRequestPromptOptions,\n  AuthSessionResult,\n  DiscoveryDocument,\n  ResponseType,\n  fetchUserInfoAsync as _fetchUserInfoAsync,\n} from '../AuthSession';\nimport { AccessTokenRequest, TokenResponse } from '../TokenRequest';\nimport { ProviderAuthRequestConfig, ProviderUser } from './Provider.types';\n\nconst settings = {\n  windowFeatures: { width: 500, height: 680 },\n  // user-read-email is required for fetching the user profile, this is fairly opinionated but\n  // it provides the best parity with Facebook and Google auth.\n  minimumScopes: ['user-read-email'],\n};\n\nexport const discovery: DiscoveryDocument = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token',\n  userInfoEndpoint: `https://api.spotify.com/v1/me`,\n};\n\nexport interface SpotifyAuthRequestConfig extends ProviderAuthRequestConfig {}\n\nfunction applyRequiredScopes(scopes: string[] = []): string[] {\n  // Add the required scopes for returning profile data.\n  const requiredScopes = [...scopes, ...settings.minimumScopes];\n  // Remove duplicates\n  return [...new Set(requiredScopes)];\n}\n\nclass SpotifyAuthRequest extends AuthRequest {\n  constructor({\n    language,\n    selectAccount,\n    extraParams = {},\n    clientSecret,\n    ...config\n  }: SpotifyAuthRequestConfig) {\n    const inputParams: Record<string, string> = {\n      ...extraParams,\n    };\n    // TODO: Verify this works\n    if (language) {\n      inputParams.language = language;\n    }\n\n    if (typeof inputParams.show_dialog === 'undefined' && selectAccount) {\n      inputParams.show_dialog = 'true';\n    }\n\n    // Apply the default scopes\n    const scopes = applyRequiredScopes(config.scopes);\n    const responseType = config.responseType ?? ResponseType.Code;\n    let inputClientSecret: string | undefined;\n    //  Spotify will throw if you attempt to use the client secret\n    if (responseType !== ResponseType.Code) {\n      // TODO: maybe warn that you shouldn't store the client secret on the client\n      inputClientSecret = clientSecret;\n    }\n    // auto set PKCE to true for authorization code flow and false for implicit flow\n    // this can be overwritten by defining a `usePKCE` parameter.\n    if (typeof config.usePKCE === 'undefined') {\n      config.usePKCE = responseType === ResponseType.Code;\n    }\n\n    super({\n      ...config,\n      clientSecret: inputClientSecret,\n      scopes,\n      extraParams: inputParams,\n    });\n  }\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n *  - TODO: Put Getting started guide URL here\n *\n * @param config\n * @param discovery\n */\nexport function useAuthRequest(\n  config: SpotifyAuthRequestConfig\n): [\n  SpotifyAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const request = useLoadedAuthRequest(config, discovery, SpotifyAuthRequest);\n  const [result, promptAsync] = useAuthRequestResult(request, discovery, {\n    windowFeatures: settings.windowFeatures,\n  });\n  const [fullResult, setFullResult] = useState<AuthSessionResult | null>(null);\n  // TODO add user info\n  useEffect(() => {\n    let isMounted = true;\n    if (\n      !fullResult &&\n      config.clientSecret &&\n      request?.responseType === ResponseType.Code &&\n      result?.type === 'success'\n    ) {\n      console.log('try: ', fullResult, config.clientSecret, request?.responseType, result?.type);\n\n      const exchangeRequest = new AccessTokenRequest({\n        clientId: config.clientId,\n        clientSecret: config.clientSecret,\n        redirectUri: config.redirectUri,\n        scopes: config.scopes,\n        code: result.params.code,\n        extraParams: {\n          // @ts-ignore: allow for instances where PKCE is disabled\n          code_verifier: request.codeVerifier,\n        },\n      });\n      exchangeRequest\n        .performAsync(discovery)\n        .then(authentication => {\n          console.log('SUCCESS', authentication);\n          if (isMounted) {\n            setFullResult({\n              ...result,\n              authentication,\n            });\n          }\n        })\n        .catch(error => {\n          console.log('FAILED', error);\n        });\n    } else {\n      setFullResult(result);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    config.clientId,\n    config.clientSecret,\n    config.redirectUri,\n    config.scopes?.join(','),\n    request?.codeVerifier,\n    request?.responseType,\n    config.responseType,\n    result,\n    fullResult,\n  ]);\n\n  return [request, fullResult, promptAsync];\n}\n\n/**\n * Fetch generic user info from the provider's OpenID Connect `userInfoEndpoint` (if supported).\n *\n * [UserInfo](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)\n *\n * @param config The `accessToken` for a user, returned from a code exchange or auth request.\n * @param discovery The `userInfoEndpoint` for a provider.\n */\nexport async function fetchUserInfoAsync(\n  response: Pick<TokenResponse, 'accessToken'>\n): Promise<ProviderUser> {\n  const providerData = await _fetchUserInfoAsync(response, discovery);\n\n  const user = {\n    name: providerData.display_name,\n    email: providerData.email,\n    id: providerData.id,\n    picture: providerData.images?.[0]?.url,\n    providerData,\n  };\n  return user;\n}\n"]}